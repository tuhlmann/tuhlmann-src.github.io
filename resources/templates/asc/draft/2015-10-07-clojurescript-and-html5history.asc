{:title "Hook your Reagent application into Html5 History"
 :layout :post
 :tags  ["Clojurescript"]
 :show-disqus? true
 :toc true
}

:toc: macro

This article describes my quest of getting a working
integration of Html5 browser history with my Reagent
Clojurescript application.

## Background

- AngularJS
- History and Html5History works out of the box
- clicking on a link to my own app does not reload the page
- Back and Forward browser buttons just work

A mighty shout out to these people whose articles and source
paved the way for me:

- http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history
- https://github.com/venantius/accountant

The mentioned solutions did provide a large amount of the working
implementation and just lacked a few personal touches I wanted
to have in place. My requirements for the integration:

- Integrate with the Html5 history api
- react on history changes
- being able to add links to my application that are
  not reloading the page but using the html5 mechanics
- being able to change query parameters of the url without
  reloading the page.

I initialize the history api in the main method of
the application, making sure its hooked in right from the start.

.clojurescript
[source,clojure]
----
(defn ^:export main []
  (history/hook-browser-navigation!)
  ...
----

Let's have a look at what this function does:

.clojurescript
[source,clojure]
----
(defn hook-browser-navigation!
  "Create and configure HTML5 history navigation."
  []
  (doto history
    (.setUseFragment false)
    (.setPathPrefix path-prefix)
    (goog.events/listen EventType.NAVIGATE
                        ;; wrap in a fn to allow live reloading
                        #(handle-url-change %))
    (.setEnabled true))
    (prevent-reload-on-known-path history))
----

I first looked at http://jekyllrb.com/[Jekyll] and
http://octopress.org/[Octopress] as they seemed to be the big
players in the field of static site generators.
